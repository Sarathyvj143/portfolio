import "./Blog.scss"
import React, { useState, useEffect } from 'react'
import {useLanguage} from "/src/providers/LanguageProvider.jsx"
import {useLocation} from "/src/providers/LocationProvider.jsx"
import BlogList from "/src/components/articles/BlogList.jsx"
import BlogPost from "/src/components/blogpost/BlogPost.jsx"
import { processBlogItems } from "/src/hooks/blogDataHelper.js"

/**
 * @param {ArticleDataWrapper} dataWrapper
 * @param {Number} id
 * @return {JSX.Element}
 * @constructor
 */
function Blog({ dataWrapper, id }) {
    const language = useLanguage()
    const location = useLocation()
    const [currentView, setCurrentView] = useState('list')
    const [selectedBlogId, setSelectedBlogId] = useState(null)
    const [blogItems, setBlogItems] = useState([])
    const [lastNavigationTime, setLastNavigationTime] = useState(0)

    // Process the items from the dataWrapper to ensure blogData is accessible
    useEffect(() => {
        if (dataWrapper) {
            const items = dataWrapper.orderedItems || [];
            const processedItems = processBlogItems(items, dataWrapper);
            setBlogItems(processedItems);
        }
    }, [dataWrapper]);

    // Function to extract blog ID from URL search params
    const getBlogIdFromUrl = () => {
        // For portfolios with section-based navigation, we'll store blog ID in localStorage
        // and search params to maintain compatibility with existing navigation system
        
        // 1. Check URL search parameters
        const searchParams = new URLSearchParams(window.location.search);
        const urlBlogId = searchParams.get('blogId');
        
        // 2. Check URL hash for direct links
        const hash = window.location.hash;
        let hashBlogId = null;
        
        if (hash && hash.includes('blogId=')) {
            const hashParams = new URLSearchParams(hash.includes('?') ? 
                hash.substring(hash.indexOf('?')) : hash);
            hashBlogId = hashParams.get('blogId');
        }
        
        // 3. Return the first valid blog ID found
        const blogId = urlBlogId || hashBlogId;
        
        return {
            blogId,
            isPostView: !!blogId
        };
    }

    // CRITICAL: This useEffect runs whenever the section changes
    // We want to ALWAYS show the blog list when navigating to the blog section
    useEffect(() => {
        // Only run this when we're in the blog section
        if (location.currentSection !== 'blog') return;
        
        // If we're coming from another section to the blog section
        // OR if this is the first time loading the blog section
        if (location.previousSection !== 'blog' || location.previousSection === null) {
            // Force blog list view
            setCurrentView('list');
            setSelectedBlogId(null);
            
            // Clean URL by removing any blogId parameter
            const url = new URL(window.location);
            if (url.searchParams.has('blogId')) {
                url.searchParams.delete('blogId');
                window.history.replaceState({}, '', url.toString());
            }
            
            // Store this navigation time
            setLastNavigationTime(Date.now());
            console.log("Blog: RESET to blog list view when navigating from another section");
        }
    }, [location.currentSection, location.previousSection]);
    
    // This useEffect handles URL changes ONLY after we're already in the blog section
    useEffect(() => {
        // Skip if we just navigated to the blog section from elsewhere
        // This prevents the URL-based navigation from overriding our "show list" rule
        if (Date.now() - lastNavigationTime < 500) {
            console.log("Blog: Skipping URL check immediately after section navigation");
            return;
        }
        
        // We only process URL parameters if we're already in the blog section
        if (location.currentSection !== 'blog' || !blogItems.length) return;
        
        // Check if there's a blog ID in the URL
        const { blogId, isPostView } = getBlogIdFromUrl();
        
        if (isPostView && blogId) {
            // Only if we're explicitly navigating to a blog post via URL
            console.log("Blog: URL has blogId:", blogId);
            setSelectedBlogId(blogId);
            setCurrentView('post');
            localStorage.setItem('current_blog_id', blogId);
        }
    }, [location.currentSection, blogItems, window.location.search, lastNavigationTime]);

    // Handle browser back/forward navigation
    useEffect(() => {
        const handlePopState = () => {
            // First check if we're in the blog section
            if (location.currentSection !== 'blog') return;
            
            // Skip if we just navigated to the blog section from elsewhere
            if (Date.now() - lastNavigationTime < 500) {
                console.log("Blog: Skipping popstate handler immediately after section navigation");
                return;
            }
            
            // Get blog ID from URL if present
            const { blogId, isPostView } = getBlogIdFromUrl();
            
            if (isPostView && blogId) {
                setSelectedBlogId(blogId);
                setCurrentView('post');
                localStorage.setItem('current_blog_id', blogId);
            } else {
                setCurrentView('list');
                setSelectedBlogId(null);
                localStorage.removeItem('current_blog_id');
            }
            
            console.log("Blog: PopState - View:", isPostView ? 'post' : 'list', "BlogId:", blogId);
        };
        
        window.addEventListener('popstate', handlePopState);
        return () => {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [location.currentSection, lastNavigationTime]);

    // Navigate to a specific blog post
    const handleBlogSelect = (blogId) => {
        if (!blogId) return;
        
        console.log("Blog: handleBlogSelect called with blogId:", blogId);
        setSelectedBlogId(blogId);
        setCurrentView('post');
        
        // Update URL with the selected blog ID
        const url = new URL(window.location);
        url.searchParams.set('blogId', blogId);
        window.history.pushState({ blogId }, '', url.toString());
        
        // Store the blog ID for navigation persistence
        localStorage.setItem('current_blog_id', blogId);
    };

    // Navigate back to blog list
    const handleBackToList = () => {
        setCurrentView('list');
        setSelectedBlogId(null);
        
        // Remove blogId from URL
        const url = new URL(window.location);
        url.searchParams.delete('blogId');
        window.history.pushState({}, '', url.toString());
        
        console.log("Blog: Back to list view");
    };

    if (currentView === 'post' && selectedBlogId) {
        return (
            <div id={`article-${id}`} className="article blog">
                <BlogPost 
                    blogId={selectedBlogId}
                    onBack={handleBackToList}
                />
            </div>
        );
    }
    
    return (
        <div id={`article-${id}`} className="article blog">
            <BlogList 
                items={blogItems}
                description={dataWrapper.locales?.description}
                onBlogSelect={handleBlogSelect}
            />
        </div>
    );
}

export default Blog;

    // Handle browser back/forward navigation
    useEffect(() => {
        const handlePopState = () => {
            // First check if we're in the blog section
            if (location.currentSection !== 'blog') return;
            
            // Skip if we just navigated to the blog section from elsewhere
            if (Date.now() - lastNavigationTime < 500) {
                console.log("Blog: Skipping popstate handler immediately after section navigation");
                return;
            }
            
            // Get blog ID from URL if present
            const { blogId, isPostView } = getBlogIdFromUrl();
            
            if (isPostView && blogId) {
                setSelectedBlogId(blogId);
                setCurrentView('post');
                localStorage.setItem('current_blog_id', blogId);
            } else {
                setCurrentView('list');
                setSelectedBlogId(null);
                localStorage.removeItem('current_blog_id');
            }
            
            console.log("Blog: PopState - View:", isPostView ? 'post' : 'list', "BlogId:", blogId);
        };
        
        window.addEventListener('popstate', handlePopState);
        return () => {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [location.currentSection, lastNavigationTime]);

    // Navigate to a specific blog post
    const handleBlogSelect = (blogId) => {
        if (!blogId) return;
        
        console.log("Blog: handleBlogSelect called with blogId:", blogId);
        setSelectedBlogId(blogId);
        setCurrentView('post');
        
        // Update URL with the selected blog ID
        const url = new URL(window.location);
        url.searchParams.set('blogId', blogId);
        window.history.pushState({ blogId }, '', url.toString());
        
        // Store the blog ID for navigation persistence
        localStorage.setItem('current_blog_id', blogId);
    };

    // Navigate back to blog list
    const handleBackToList = () => {
        setCurrentView('list');
        setSelectedBlogId(null);
        
        // Remove blogId from URL
        const url = new URL(window.location);
        url.searchParams.delete('blogId');
        window.history.pushState({}, '', url.toString());
        
        // We keep the localStorage item to remember the last viewed blog post
        // Only remove it when explicitly requested or when viewing another blog post
        console.log("Blog: Back to list view");
    };

export default Blog
